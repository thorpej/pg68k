Name		SYSCTL;
Partno		PG68KSYS;
Date		05/21/25;
Revision	1;
Designer	thorpej;
Company		lulz;
Assembly	pg68k cpu030;
Location	N/A;
Device		f1508isptqfp100;

/* ATF1508 TQFP-100, JTAG-programmed */

property ATMEL	{ JTAG=on };
property ATMEL	{ TMS_pullup=on };
property ATMEL	{ TDI_pullup=on };

/** INPUTS **/
pin	1	=	!AS;
pin	2	=	!DS;
/*	3	VCCIO		*/
/*	4	TDI		*/
pin	5	=	RW;		/* 1=R, 0=W */
pin	6	=	FC0;
pin	7	=	FC1;
pin	8	=	FC2;
pin	9	=	SIZ0;
pin	10	=	SIZ1;
/*	11	GND		*/
pin	12	=	!FPU_PRESENT;
pin	13	=	A0;
pin	14	=	A1;
/*	15	TMS		*/
pin	16	=	A2;
pin	17	=	A3;
/*	18	VCCIO		*/
pin	19	=	A4;
pin	20	=	A5;
pin	21	=	A6;
pin	22	=	A7;
pin	23	=	A8;
pin	24	=	A9;
pin	25	=	A10;
/*	26	GND		*/
pin	27	=	A11;
pin	28	=	A12;
pin	29	=	A13;
pin	30	=	A14;
pin	31	=	A15;
pin	32	=	A16;
pin	33	=	A17;
/*	34	VCCIO		*/
pin	35	=	A18;
pin	36	=	A19;
pin	37	=	A20;
/*	38	GND		*/
/*	39	VCCINT		*/
pin	40	=	A21;
pin	41	=	A22;
pin	42	=	A23;
/*	43	GND		*/
pin	44	=	A24;
pin	45	=	A25;
pin	46	=	A26;
pin	47	=	A27;
pin	48	=	A28;
pin	49	=	A29;
pin	50	=	A30;
/*	51	VCCIO		*/
pin	52	=	A31;

pin	89	=	!RESET;
pin	90	=	CPU_CLK;
/*	91	VCCINT		*/

/** OUTPUTS **/

/*
 * These signals are active-low at the CPU, but we drive them
 * active-high and connect them to fast open-drain inverters
 * externally so that they can also be driven by external decoders.
 *
 * If someone can clue me in on how to use the Open_collector property
 * on a per-pin basis, that would be s00000p3r!
 */
pin	100	=	DSACK1;
pin	99	=	DSACK0;
pin	98	=	STERM;
pin	97	=	CI;	/* /CIIN on the CPU */
pin	96	=	BERR;
/*	95	GND		*/
pin	94	=	AVEC;

pin	93	=	!RD8;	/* /RD and ... */
pin	92	=	!WR8;	/* .../WR outputs for 8-bit peripherals. */
/*	91	VCCINT		*/
/*	90	CPU_CLK		*/
/*	89	/RESET		*/
/*	88	OE1		*/
/*	87	GCLK1		*/
/*	86	GND		*/
/*	85	<pg68k rsvd>	*/
/*	84	<pg68k rsvd>	*/
/*	83	<pg68k rsvd>	*/
/*	82	VCCIO		*/
pin	81	=	!DS8;		/*  8-bit port: D31..24 */
pin	80	=	!DS16_ODD;	/* 16-bit port: DS23..16 */
pin	79	=	!DS16_EVEN;	/* 16-bit port: D31..24 */
pin	78	=	!DS32_LL;	/* 32-bit port: D7..0 */
pin	77	=	!DS32_ML;	/* 32-bit port: D15..8 */
pin	76	=	!DS32_MU;	/* 32-bit port: D23..16 */
pin	75	=	!DS32_UU;	/* 32-bit port: D31..24 */
/*	74	GND		*/
/*	73	TDO		*/
pin	72	=	!ROMSEL;
pin	71	=	!DEV8SEL;
pin	70	=	!MMIOSEL;
pin	69	=	!RAMSEL;
pin	68	=	!FPUSEL;
pin	67	=	!FRAM_RD;
/*	66	VCCIO		*/
pin	65	=	!FRAM_WR;
/*	62	TCK		*/
/*	59	GND		*/

/** DECLARATIONS AND INTERMEDIATE VARIABLE DEFINITIONS **/

/* An inverted, delayed clock. */
node CPU_CLKDb;

/* address space indicators */
node SPACE_IACK;

/* Shift register to indicate boot-up for the first 4 memory cycles. */
node BOOT_A;
node BOOT_B;
node BOOT_C;
node RUNNING;

/** LOGIC EQUATIONS **/

/*
 * This is used to provide a slightly delayed clock signal during
 * FPU selection.  See section 12.2 of the 68030 user's manual.
 */
CPU_CLKDb = /CPU_CLK;

/*
 * We are using a 25MHz CPU clock, which means a single clock period
 * is 40ns.  Bus cycle states are even (S0, S2, S4, ...) when CLK is
 * high and odd (S1, S3, S5, ...) when the clock is low.
 *
 * SYNCHRONOUS READ CYCLES (section 7.3.4)
 *   T-start
 * S0 (00ns): Address, Function, and Size placed on the bus.
 * S1 (20ns): /AS is asserted indicating valid address.  /DS is
 *            asserted, indicating target should start driving
 *            the data bus.
 * S2 (40ns): Target must have valid data on the data bus.  CPU
 *            samples /STERM at the beginning of S2 (rising edge
 *            of CLK).  If /STERM is recognized, data is latched
 *            on the falling edge of CLK (corresponding to the
 *            start of S3).
 * S3 (60ns): /AS and /DS are de-asserted.  Address, RW, Size,
 *            and Function remain valid throughout S3 in order
 *            to simplify memory interfaces.  Target must keep
 *            the data bus valid for the synchronous hold time from
 *            the start of S3.
 *
 * SYNCHRONOUS WRITE CYCLES (section 7.3.5)
 *   T-start
 * S0 (00ns): Address, Function, and Size placed on the bus.
 * S1 (20ns): /AS is asserted indicating valid address.
 * S2 (40ns): Processor places the data to be written onto data
 *            bus.  CPU samples /STERM at the beginning of S2
 *            (rising edge of CLK).  If /STERM is *not* recognized,
 *            then /DS is asserted at the end of S2 (falling edge
 *            of CLK) and wait states are inserted.
 * S3 (60ns): /AS (and /DS, if necessary) is de-asserted.  Address,
 *            RW, Size, and Function remain valid throughout S3
 *            in order to simply memory interfaces.
 *
 * Some notes on various devices that will be the basis for the discussion
 * about 8-bit peripheral timing:
 *
 * TL16C2552IFNR dual UART - /IOR or /IOW minimum pulse time @ 5V: 40ns.
 *
 * Intersil CP82C54 timer (10MHz part clocked at 6.25MHz) - /RD min pulse
 * width 95ns, data setup before /WR 95ns, /WR min pulse width 95ns.
 *
 * IDE/ATA drives have an /IORDY output, but can also be 8-bit or 16-bit,
 * so we will build that controller in a separate CPLD.
 *
 * The SST39SF040-70 NOR flash (of which we will have two) has 70ns from
 * the time /CS is asserted (happens with /AS) before data is valid and
 * 35ns from the time /OE is asserted (happens with /DS).
 */

/*
 * We clear BOOT_A-BOOT_C and RUNNING when /RESET is asserted.  We then
 * shift 1's through the chain.  After 4 cycles, RUNNING will be 1.  This
 * is used to map the ROM to $0000.0000 until the reset vector is fetched.
 *
 * N.B. We want the state to advance **after** the bus cycle is over,
 * thus we clock when AS is de-asserted.
 */
BOOT_A.AR = RESET;
BOOT_B.AR = RESET;
BOOT_C.AR = RESET;
RUNNING.AR = RESET;

BOOT_A.CK = !AS;
BOOT_B.CK = !AS;
BOOT_C.CK = !AS;
RUNNING.CK = !AS;

BOOT_A.D = 'b'1;
BOOT_B.D = BOOT_A;
BOOT_C.D = BOOT_B;
RUNNING.D = BOOT_C;

/*
 * Function bits for address space encodings:
 *
 * FC2   FC1   FC0
 *  0     0     0	(Undefined, reserved)
 *  0     0     1	User Data Space
 *  0     1     0	User Program Space
 *  0     1     1	(Undefined, reserved)
 *  1     0     0	(Undefined, reserved)
 *  1     0     1	Supervisor Data Space
 *  1     1     0	Supervisor Program Space
 *  1     1     1	CPU Space
 *
 * Note that {User,Supervisor}{Data,Program} -> FC1 xor FC0 -> 1
 */

$define SPACE_NORMAL	(FC1 $ FC0)

$define SPACE_CPU	(FC2 & FC1 & FC0)

$define ACCTYPE_COPROC	(!A19 & !A18 & A17 & !A16)	/* 0x02 */

#define CPID_FPU	(!A15 & !A14 & A13)		/* 0x01 */

SPACE_IACK = (FC2 & FC1 & FC0) /* CPU space */ &
             (A19 & A18 & A17 & A16) /* ACCTYPE = 0xf */;

/*
 * Top-level address decoding:
 *
 * $FFF0.0000 - $FFFF.FFFF	System ROM (1MB)
 * $FFE0.0000 - $FFEF.FFFF	8-bit peripheral space (1MB)
 * $FF80.0000 - $FFBF.FFFF	Fast RAM (4MB)
 * $8000.0000 - $BFFF.FFFF	Memory mapped I/O space (1GB)
 * $0000.0000 - $7FFF.FFFF	RAM (2GB)
 *
 * The bottom 3GB are futher decoded by external decoding logic
 * (qualified by /RAMSEL and /MMIOSEL).
 */

$define REGION_ROM	([A31..20]:&)

$define REGION_DEV8	([A31..21]:& & !A20)

$define REGION_FRAM	([A31..23]:& & !A22)

/* A29=don't care, A28=don't care */
$define REGION_MMIO	(A31 & !A30)

$define REGION_RAM	!A31

/*
 * The ROM is always selected when RUNNING is not asserted (for the reset
 * vector fetch).
 */
ROMSEL = SPACE_NORMAL & AS & !RUNNING
       # SPACE_NORMAL & AS & REGION_ROM;

DEV8SEL = SPACE_NORMAL & AS & REGION_DEV8;

MMIOSEL = SPACE_NORMAL & AS & REGION_MMIO;

/*
 * The RAM region is never selected when RUNNING is not asserted (to avoid
 * conflicting with the ROM during the reset vector fetch).
 */
RAMSEL = SPACE_NORMAL & AS & RUNNING & REGION_RAM;

/*
 * Select the FPU.  See section 12.2 of the 68030 user's manual.
 */
FPUSEL = SPACE_CPU & ACCTYPE_COPROC & CPID_FPU & /CPU_CLK
       # SPACE_CPU & ACCTYPE_COPROC & CPID_FPU & AS
       # SPACE_CPU & ACCTYPE_COPROC & CPID_FPU & /CPU_CLKDb;

/*
 * We'd like to eventually use synchronous bus cycles for fast RAM,
 * but we'll do the system bring-up using async cycles for now.  Once
 * the system is running with async cycles, we can build the state
 * machine to implement sync cycles.
 *
 * As such, force STERM to be de-asserted for now.
 */
FRAMSEL = SPACE_NORMAL & AS & REGION_FRAM;
STERM = 'b'0;

/*
 * Assert BERR if:
 * - Normal bus access and not top-level regions are selected.
 * - FPU access and FPU not present.
 */
BERR = SPACE_NORMAL & AS & !ROMSEL & !DEV8SEL & !FRAMSEL & !MMIOSEL & !RAMSEL
     # FPUSEL & AS & !FPU_PRESENT;

/*
 * For now, all interrupts are auto-vectored.  So, if we see an IACK
 * cycle, just assert AVEC.
 */
AVEC = SPACE_IACK & AS;

/*
 * Inhibit the cache on the reset vector fetch or if the
 * 8-bit peripheral region was seleced.
 */
CI = !RUNNING # DEV8SEL;

/*
 * Generate the data strobes for the individual byte lanes for the
 * three port sizes.
 *
 * N.B. the 16-bit and 32-bit ports, the logic diagram in Figure 7-18
 * of the 68030 user's manual always shows every byte lane being driven
 * for read cycles, so we do the same.
 *
 * See Table 7-7 in the 68030 user's manual.
 *
 * Some of these equations have redundant terms, but I'm happy to
 * let the compiler optimize them out for the sake of clarity.
 */
DS8 = DS;

DS16_EVEN = DS &  RW
	  # DS & !A0;

DS16_ODD = DS &  RW
           /* byte */
	 # DS & !SIZ1 &  SIZ0 & A0
	   /* word */
	 # DS &  SIZ1 & !SIZ0
	   /* 3 byte */
	 # DS &  SIZ1 &  SIZ0
	   /* long word */
	 # DS & !SIZ1 & !SIZ0;

/*
 * DS32_* equations are adapted from Figure 12-7 of the 68030 user's
 * manual.  I manually verified they produce the same results as
 * as shown in Table 7-7.
 */

DS32_UU = DS & RW
	# DS & !A0 & !A1;

DS32_MU = DS & RW
	# DS & A0 & !A1
	# DS & !A1 & !SIZ0
	# DS & !A1 & SIZ1;

DS32_ML = DS & RW
	# DS & !A0 & A1
	# DS & !A1 & !SIZ0 & !SIZ1
	# DS & !A1 & SIZ0 & SIZ1
	# DS & !A1 & A0 & !SIZ0;

DS32_LL = DS & RW
	# DS & A0 & A1
	# DS & A0 & SIZ0 & SIZ1
	# DS & !SIZ0 & !SIZ1
	# DS & A1 & SIZ1;

/*
 * Generate /RD8 and /WR8 signals.  We just follow /DS as above with /DS8.
 */
RD8 = DS & RW;
WR8 = DS & !RW;

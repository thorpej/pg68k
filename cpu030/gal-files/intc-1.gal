GAL22V10
INTC1

 FFCI /I1 /I2   /I3   /I4   /I5   /I6   /I7     /IACK /RESET /CS   GND
/DS    RW /IPL0 /IPL1 /IPL2 /AVEC  BERR  DSACK0  D0    ENAB   FFCO VCC

;
; == intc-1 ==
; An absurdly basic interrupt controller for Playground 68030 Mk I.
; (We consume every pin, but the entire thing fits inside a single
; 22V10.)
;
; This is essentially a simple priority encoder that encodes interrupts
; according to the following priority:
;
; I7	IPL <- 7
; I6	IPL <- 6
; I5	IPL <- 5
; I4	IPL <- 4
; I3	IPL <- 3
; I2	IPL <- 2
; I1	IPL <- 1
;
; There is a single global interrupt enable bit, and it is cleared upon
; reset.  I7 (IPL7, the non-maskable interrupt) is not affected by the
; enable bit, and thus is truly non-maskable.
;
; The IRQ inputs are active-low (and assumed to be pulled up and driven
; by open-drain / open-collector outputs to allow wired-OR configuration,
; although this is not strictly required).  The IPLx outputs are similarly
; active-low, and are intended to directly drive the corresponding inputs
; to the CPU.
;
; D0 is an I/O pin that reflects the value of ENAB on read and latches a
; new value into ENAB on write.  22V10s don't have buried signals, so ENAB
; has to be brought out to a pin.  It is NOT tri-stated and should be left
; unconnected on the board.
;
; We take the /DS and RW signals directly from the CPU, and a chip-select
; from the address decoder.  We internally generate the D-FF clock (FFCO),
; but have to feed it back in externally (FFCI); when the data strobe for
; a write is complete, we have to generate a rising edge on FFCI.  We also
; generate /DSACK0 ourselves.
;
; We also check for the CPU performing an interrupt acknowledge cycle
; (the SYSCTL CPLD decodes this for us and provides the IACK signal).
; If this is happening and an interrupt is pending, we assert the /AVEC
; output that's connected to the CPU.  Otherwise, /BERR is generated so
; the CPU can perform a suprious interrupt.
;
; This isn't a particularly sophisticated interrupt controller, obviously.
; This is merely a very simple first step to get the system up and running.
;

;
; When reset is asserted, clear all the D-FFs (ENAB).
;
AR = RESET;

;
; Reflect the value of ENAB onto the data bus when the read strobe is
; asserted.
;
D0.T = ENAB;
D0.E = CS * DS * RW;

;
; We want the idle state of FFCO to be high, and for it to go low when we
; get a write strobe.  When the write strobe ends, FFCO will go high again,
; which is fed back eternally to FFCI to latch the new ENAB value from D0.
;
/FFCO = CS * DS * /RW;
ENAB.R = D0;

;
; Acknowledge an 8-bit transfer as soon as we detect the data strobe.
; The 22V10 is fast enough that no wait states are required.
;
DSACK0.T = GND;
DSACK0.E = CS * DS;

;
; Truth table for /IPLx outputs:
;
; ENAB I7  I6  I5  I4  I3  I2  I1     IPL2  IPL1  IPL0
;   F   F   x   x   x   x   x   x        F     F     F       0
;   T   F   F   F   F   F   F   F        F     F     F       0
;   T   F   F   F   F   F   F   T        F     F     T       1
;   T   F   F   F   F   F   T   x        F     T     F       2
;   T   F   F   F   F   T   x   x        F     T     T       3
;   T   F   F   F   T   x   x   x        T     F     F       4
;   T   F   F   T   x   x   x   x        T     F     T       5
;   T   F   T   x   x   x   x   x        T     T     F       6
;   x   T   x   x   x   x   x   x        T     T     T       7
;

IPL0 = ENAB * /I7 * /I6 * /I5 * /I4 * /I3 * /I2 *  I1
     + ENAB * /I7 * /I6 * /I5 * /I4 *  I3
     + ENAB * /I7 * /I6 *  I5
     +         I7;

IPL1 = ENAB * /I7 * /I6 * /I5 * /I4 * /I3 *  I2
     + ENAB * /I7 * /I6 * /I5 * /I4 *  I3
     + ENAB * /I7 *  I6
     +         I7;

IPL2 = ENAB * /I7 * /I6 * /I5 *  I4
     + ENAB * /I7 * /I6 *  I5
     + ENAB * /I7 *  I6
     +         I7;

;
; Assert our /AVEC output if the CPU is performing an interrupt acknowledge
; cycle and we have any interrupt pending.
;
; We simplify the equation by using fed-back IPLx signals; the additional
; propagation delay isn't a concern because IPLx will have already propagated
; in order for the IACK cycle to begin in the first place.
;
; If we see /IACK and no interrupt is pending, we assert /BERR.  Note that
; /BERR is a tri-state because we don't natively have open-drain outputs
; in a 22V10.
;
AVEC = IACK * IPL0
     + IACK * IPL1
     + IACK * IPL2;

BERR.T = GND;
BERR.E = IACK * /IPL0 * /IPL1 * /IPL2;
